name: NAP Wordpress deployment

on:
  push:
    branches: [ development, production ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  deploy-to-gce:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2


    - name: Prepare
      id: prep
      run: |
        VERSION=latest
        GIT_HASH=$(git rev-parse --short "$GITHUB_SHA") 

        BRANCH=""
        if [[ $GITHUB_REF == refs/heads/* ]]; then
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        fi

        source "custom-${BRANCH}.cfg"
        VERSION=${IMAGE_TAG} ### from custom.cfg ###

        echo ::set-output name=version::${VERSION}
        echo ::set-output name=branch::${BRANCH}

    - name: Line notification start
      uses: snow-actions/line-notify@v1.0.0
      with:
        access_token: ${{ secrets.LINE_ACCESS_TOKEN }}
        message: "Start deploy [nap-wordpress] version [${{ steps.prep.outputs.version }}] to env [${{ steps.prep.outputs.branch }}]..."

    - name: Deploy to GCE
      run: |
        echo "${{ secrets.DEV_GCE_PRIVATE_KEY }}" > gce-dev.key
        echo "${{ secrets.PROD_GCE_PRIVATE_KEY }}" > gce-prod.key

        echo "${{ secrets.DEV_GCE_LOGIN_SA }}" > sa-dev.json
        echo "${{ secrets.PROD_GCE_LOGIN_SA }}" > sa-prod.json

        chmod 400 gce-dev.key gce-prod.key
        chmod +x app-deploy.bash
        ./app-deploy.bash ${{ steps.prep.outputs.branch }}

    - name: show job status
      if: always()
      uses: snow-actions/line-notify@v1.0.0
      with:
        access_token: ${{ secrets.LINE_ACCESS_TOKEN }}
        message: "Done deploy [nap-wordpress] version [${{ steps.prep.outputs.version }}] to env [${{ steps.prep.outputs.branch }}] with status [${{job.status}}]"
